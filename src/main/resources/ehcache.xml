<?xml version="1.0" encoding="UTF-8"?>
<ehcache>

    <!--
        ● maxElementsInMemory="1000"
        설명: 캐시에 메모리 상에서 유지될 수 있는 최대 요소 수를 정의. 여기선 최대 1000개 요소가 메모리에 저장
        의미: 1000개 이상의 캐시 항목이 추가시 캐시 정책에 따라 오래된 항목이 제거됨(아래의 memoryStoreEvictionPolicy)
        유의사항: 캐시 항목을 너무 많이 저장시 메모리 사용량 증가, 서버 성능에 맞게 적절한 값 설정 필요

        ● maxElementsOnDisk="0"
        설명: 캐시에 디스크에 저장될 수 있는 최대 요소 수를 정의. 여기선 0으로 설정 → 디스크에 저장되지 않음
        의미: 캐시 항목이 메모리에서만 유지, 디스크 저장 비활성화
        유의사항: 메모리 부족 시 디스크로 캐시 항목을 저장하려면 값 설정 필요

        ● eternal="false"
        설명: 캐시 항목을 영구적 유지 여부 결정. false : TTL(유효 시간) 및 TTI(유휴 시간) 설정에 따라 캐시 항목이 만료.
        의미: 캐시 항목이 설정된 TTL 및 TTI 기준으로 만료.

        ● statistics="false"
        설명: 캐시 사용에 대한 통계 정보 수집 여부를 설정. false : 통계 정보는 수집 X.
        의미: 캐시 성능 분석을 위한 통계 비활성화 성능을 개선할 수 있지만 캐시 히트율 등의 정보를 확인 불가

        ● timeToIdleSeconds="3600"
        설명: 캐시 항목이 마지막으로 접근된 후 유효한 시간을 초 단위로 설정. 여기서는 3600초(1시간) 동안 유효
        의미: 캐시 항목이 1시간 동안 접근되지 않으면 만료(제거)
        유의사항: 주로 유휴 시간에 기반한 만료를 정의, 설정 시간 동안 항목이 사용되지 않으면 만료.

        ● timeToLiveSeconds="3600"
        설명: 캐시 항목이 생성된 후 유효한 전체 시간을 초 단위로 설정. 여기서는 3600초(1시간) 동안 유효
        의미: 캐시 항목이 생성된 후 1시간이 지나면 접근 여부와 관계 없이 만료
        유의사항: TTL과 TTI는 독립적으로 작동. 즉, 항목이 자주 사용 되어도 TTL 만료시 항목 제거

        ● overflowToDisk="false"
        설명: 메모리에 캐시가 가득 찼을 때 디스크로 넘겨 저장 할지 여부 설정. false → 메모리 외부로 항목이 저장 되지 않음
        의미: 메모리 한도 도달시 오래된 항목이 제거(아래의 LRU), 디스크로 저장 되지 않음

        ● diskPersistent="false"
        설명: 캐시 항목을 디스크에 영구 저장 할지 여부 설정. false → 캐시 항목이 디스크에 영구 저장 되지 않음.
        의미: 서버 재시작 후 캐시 항목 복구 되지 않음, 디스크에 저장된 데이터는 유지 되지 않음.
              - 디스크에 저장된 데이터의 의미 : 메모리 캐시 공간 부족시 디스크를 사용하여 캐시 항목을 임시 저장하여
                사용하는데 이에 대한 임시 저장 캐시 데이터를 의미함(디스크 자체의 파일 혹은 DB와의 영구 데이터와 관계X)

        ● memoryStoreEvictionPolicy="LRU"
        설명: 메모리 캐시가 가득 찼을 때 어떤 정책으로 캐시 항목을 제거할 지 설정(메모리 최적화)
        정책 종류
         - LRU(Least Recently Used) : 가장 오래된 항목(최근에 사용 되지 않은 항목)부터 제거
         - LFU (Least Frequently Used) : 가장 적게 사용된 항목을 먼저 제거(사용 빈도가 낮은 항목)
           → 특정 데이터가 자주 사용될 경우 캐시에 오래 남기기 위해 사용
         - FIFO (First In First Out) :가장 먼저 캐시에 들어온 항목을 먼저 제거(사용 여부와 관계 없이 오래된 항목순 제거)
           → 캐시에 데이터 추가한 순서가 중요한 경우 사용
    -->
    <defaultCache
            maxElementsInMemory="1000"
            maxElementsOnDisk="0"
            eternal="false"
            statistics="true"
            timeToIdleSeconds="3600"
            timeToLiveSeconds="3600"
            overflowToDisk="false"
            diskPersistent="false"
            memoryStoreEvictionPolicy="LRU"/>

    <cache
            name="NoticeMapper.findAll"
            maxElementsInMemory="10000"
            maxElementsOnDisk="0"
            eternal="false"
            statistics="true"
            timeToIdleSeconds="3600"
            timeToLiveSeconds="3600"
            overflowToDisk="false"
            diskPersistent="false"
            memoryStoreEvictionPolicy="LRU"/>

    <cache
            name="NoticeMapper.findByPage"
            maxElementsInMemory="10000"
            maxElementsOnDisk="0"
            eternal="false"
            statistics="true"
            timeToIdleSeconds="3600"
            timeToLiveSeconds="3600"
            overflowToDisk="false"
            diskPersistent="false"
            memoryStoreEvictionPolicy="LRU"/>

    <cache
            name="NoticeMapper.getNoticeTotalCount"
            maxElementsInMemory="10000"
            maxElementsOnDisk="0"
            eternal="false"
            statistics="true"
            timeToIdleSeconds="3600"
            timeToLiveSeconds="3600"
            overflowToDisk="false"
            diskPersistent="false"
            memoryStoreEvictionPolicy="LRU"/>

    <cache
            name="NoticeMapper.noticeSearchSelectPage"
            maxElementsInMemory="10000"
            maxElementsOnDisk="0"
            eternal="false"
            statistics="true"
            timeToIdleSeconds="3600"
            timeToLiveSeconds="3600"
            overflowToDisk="false"
            diskPersistent="false"
            memoryStoreEvictionPolicy="LRU"/>

</ehcache>
